
package com.rac021.jaxy.service.script.generator ;

import javax.ws.rs.GET ;
import javax.inject.Inject ;
import java.net.URLEncoder ;
import javax.ws.rs.Produces ;
import javax.ws.rs.HeaderParam ;
import javax.ws.rs.core.Context ;
import javax.ws.rs.core.UriInfo ;
import javax.ws.rs.core.Response ;
import javax.annotation.PostConstruct ;
import java.io.UnsupportedEncodingException ;
import com.rac021.jax.api.crypto.CipherTypes ;
import com.rac021.jax.api.qualifiers.security.Policy  ;
import com.rac021.jax.api.qualifiers.security.Cipher  ;
import com.rac021.jax.api.qualifiers.ServiceRegistry  ;
import com.rac021.jax.api.qualifiers.security.Secured ;
import com.rac021.jax.security.provider.configuration.YamlConfigurator ;
import org.eclipse.microprofile.metrics.annotation.Counted ;

/**
 *
 * @author R.Yahiaoui
 */

@ServiceRegistry("script_gen")
@Secured(policy = Policy.Public )
@Cipher( cipherType = { CipherTypes.AES_128_CBC, CipherTypes.AES_256_CBC } )

public class CobyService    {
 
    @Inject
    YamlConfigurator cfg ;
   
    @PostConstruct
    public void init() {
    }

    public CobyService() {
    }
    
    @GET
    @Produces( {  "xml/plain" , "json/plain" } )
    @Counted(name = "countServiceScriptGen", absolute = true, reusable = true, monotonic = true)
    public Response gen ( @HeaderParam("Keep") String filterdIndex , 
                          @Context UriInfo uriInfo ) throws UnsupportedEncodingException {    
        
        String generateScriptCUSTOM = generateScriptCUSTOM( "http://www.si.com "        , 
                                                             "coby"                     ,
                                                            "LOGIN"                     ,
                                                            "PASSWORD"                  ,
                                                            "PARAMS"                    ,
                                                            ""                          ,
                                                            "xml/plain"                 ,
                                                            cfg.getLoginSignature()     ,
                                                            cfg.getPasswordSignature()  ,
                                                            cfg.getTimeStampSignature() ,
                                                            cfg.getAlgoSign()           ,
                                                            "AES_256_CBC" )             ;       
       return Response.status( Response.Status.OK )
                      .entity( generateScriptCUSTOM )
                      .build() ;
    }
    

     public static String generateScriptCUSTOM ( String url           , 
                                                 String service       ,
                                                 String login         , 
                                                 String password      , 
                                                 String params        , 
                                                 String keep          ,
                                                 String accept        ,
                                                 String hashLogin     , 
                                                 String hashPassword  , 
                                                 String hashTimeStamp ,
                                                 String algoSign      ,
                                                 String cipher ) throws UnsupportedEncodingException {
            
        String _url =  url.trim() + ( url.endsWith("/") ? service : "/" + service ) ;
        
        params  = URLEncoder.encode( params.trim(), "UTF-8") ;
        
        if( params != null && ! params.isEmpty() )
           _url += "?" + params ;
        
        String trustCert = _url.trim().startsWith("https") ? " -k " : " " ;
        
        String invokeService =  " curl "        +
                                trustCert       +
                                "-H \"accept: " +
                                accept + "\"  " ;
               
        if( keep != null && ! keep.isEmpty() ) {
          invokeService += " -H \"keep: " + keep + " \" " ;
        }
        
        if( cipher != null && ! cipher.isEmpty() ) {
          invokeService += " -H \"cipher: " + cipher + " \" " ;
        }
        
        return    " #!/bin/bash                                       \n\n"    +
                " # Script generated by G-JAX-CLIENT                   \n"     +
                " # Author : ---                                     \n\n"     +
                
                " urlencode() {\n" +
                "    # urlencode <string>\n" +
                "    old_lc_collate=$LC_COLLATE\n" +
                "    LC_COLLATE=C\n" +
                "    \n" +
                "    local length=\"${#1}\"\n" +
                "    for (( i = 0; i < length; i++ )); do\n" +
                "        local c=\"${1:i:1}\"\n" +
                "        case $c in\n" +
                "            [a-zA-Z0-9.~_-]) printf \"$c\" ;;\n" +
                "            *) printf '%%%02X' \"'$c\" ;;\n" +
                "        esac\n" +
                "    done\n" +
                "    \n" +
                "    LC_COLLATE=$old_lc_collate\n" +
                " } \n " +
                " \n"    +
                
                "urldecode() {\n" +
                "    # urldecode <string>\n" +
                "\n" +
                "    local url_encoded=\"${1//+/ }\"\n" +
                "    printf '%b' \"${url_encoded//%/\\\\x}\"\n" +
                "} \n\n" +
                
                "  while [[ \"$#\" > \"0\" ]] ; do                     \n"     +
                "     case $1 in                                       \n"     +
                "         (*=*) KEY=${1%%=*}                           \n"     +
                "               VALUE=${1#*=}                          \n"     +
                "                                                      \n"     +
                "               case \"$KEY\" in                       \n"     +
                "                                                      \n"     +
                "                    (\"host\")       Host=$VALUE      \n"     +
                "                    ;;                                \n"     +
                "                    (\"service\")    Service=$VALUE   \n"     +
                "                    ;;                                \n"     +
                "                    (\"login\")      Login=$VALUE     \n"     +
                "                    ;;                                \n"     +
                "                    (\"password\")   Password=$VALUE  \n"     +
                "                    ;;                                \n"     +
                "                    (\"params\")     Params=$VALUE    \n"     +
                "                    ;;                                \n"     +
                "               esac	                               \n"     +
                "     esac                                             \n"     +
                " help)  echo                                                                                        \n" +
                "        echo \" Total Arguments : Five                                                            \"\n" +
                "        echo                                                                                        \n" +
                "        echo \"   host       :  Hostname. Ex : hostname=http://147.99.222.28:8181/rest/resources  \"\n" +
                "        echo \"   login=     :  Login of the user. Ex : login=admin                               \"\n" +
                "        echo \"   password=  :  Passwoord of the user. Ex : password=admin                        \"\n" +
                "        echo \"   service=   :  service name. Ex : service=InfoService                            \"\n" +
                "        echo \"   params=    :  Prams passed to the service. Ex :  params=SI = SOERE OLA          \"\n" +
                "        echo                                                                                        \n" +
                "        exit ;                                                                                        " +
                "     shift                                            \n"     +
                "  done                                              \n\n"     +
                " Host=${Host:-\""+_url+"\"}                           \n"     +
                " Login=${Login:-\""+login+"\"}                        \n"     +
                " Password=${Password:-\""+password+"\"}               \n"     +
                " Service=${Service:-\""+service+"\"}                  \n"     +
                " Params=${Params:-\"\"}                               \n"     +
                " TimeStamp=$(date +%s)                             \n\n "     + 
                getHashedScript( "Login"     , hashLogin     )     + "\n "     + 
                getHashedScript( "Password"  , hashPassword  )     + "\n "     + 
                getHashedScript( "TimeStamp" , hashTimeStamp )     + "\n "     + 
                getSigneScript( algoSign )                     + "\n\n\n "     +                 
                "  echo                                               \n"      +
                "  echo -e \" ###################################### \"\n"     +
                "  echo -e \" ######## Info Service   ############## \"\n"     +
                "  echo -e \" -------------------------------------  \"\n"     +
                "  echo -e \"\\e[90m$0            \\e[32m            \"\n"     +
                "  echo                                                \n"      +
                "  echo -e \" ##  Host     : $Host                   \"\n"     +
                "  echo -e \" ##  Service  : $Service                \"\n"     +
                "  echo -e \" ##  Params   : $Params                 \"\n"     +
                "  echo -e \" ##  Login    : $Login                  \"\n"     +
                "  echo -e \" ##  Password : $Password               \"\n"     +
                "  echo                                                \n"     +
                "  echo  -e \" ##################################### \"\n"     +
                "  echo                                               \n\n"    +
                "  Params=$( urlencode  \"$Params\" )                 \n\n"    +                
               
                invokeService                                                   +
                "-H \"API-key-Token: "                                          +
                "$Login $TimeStamp $SIGNE\" "                                   +
                " $Host/$Service?$Params                                \n\n"  ;
    }
     
    
    private static String getHashedScript( String variable, String algo ) {
      
        if(algo.equalsIgnoreCase("SHA1")) {
          return " Hashed_"                            + 
                 variable.trim()                       + 
                 "=` echo -n $"                        + 
                 variable.trim()                       + 
                 " | sha1sum  | cut -d ' ' -f 1 ` \n"  + 
                 "  Hashed_"                           + 
                 variable.trim()                       + 
                 "=` echo $Hashed_"                    + 
                 variable.trim()                       + 
                 " | sed 's/^0*//'`"                   ;
        }
        if(algo.equalsIgnoreCase("SHA2")) {
          return " Hashed_"                             + 
                 variable.trim()                        + 
                 "=` echo -n $"                         + 
                 variable.trim()                        + 
                 " | sha256sum  | cut -d ' ' -f 1 ` \n" + 
                 "  Hashed_"                            + 
                 variable.trim()                        + 
                 "=` echo $Hashed_"                     + 
                 variable.trim()                        + 
                 " | sed 's/^0*//'`"                    ;
        }
        else if(algo.equalsIgnoreCase("MD5")) {
           return " Hashed_"                           + 
                  variable.trim()                      + 
                  "=` echo -n $"                       + 
                  variable.trim()                      + 
                  " | md5sum  | cut -d ' ' -f 1` \n"   + 
                  "  Hashed_" + variable.trim()        +
                  "=` echo $Hashed_" + variable.trim() +
                  " | sed 's/^0*//'`" ;
        }
        
        return " Hashed_" + variable.trim() + "=\"$" + variable.trim() + "\""  ;
    }
    
    
    private static String getSigneScript( String algo ) {
      
        if(algo.equalsIgnoreCase("SHA1"))  {
          return " SIGNE=`echo -n $Hashed_Login$Hashed_Password$Hashed_TimeStamp" + 
                  " | sha1sum  | cut -d ' ' -f 1 ` \n "                           + 
                  " SIGNE=` echo $SIGNE | sed 's/^0*//' ` "                       ; 
        }
        if(algo.equalsIgnoreCase("SHA2"))  {
          return " SIGNE=`echo -n $Hashed_Login$Hashed_Password$Hashed_TimeStamp" + 
                  " | sha256sum  | cut -d ' ' -f 1 ` \n "                         + 
                  " SIGNE=` echo $SIGNE | sed 's/^0*//' ` "                       ; 
        }
        else if(algo.equalsIgnoreCase("MD5")) {
          return " SIGNE=`echo -n $Hashed_Login$Hashed_Password$Hashed_TimeStamp " + 
                 "| md5sum  | cut -d ' ' -f 1 ` \n "                               +
                 " SIGNE=` echo $SIGNE | sed 's/^0*//' ` "                         ;
        }
        return " SIGNE=`echo -n $Hashed_Login$Hashed_Password$Hashed_TimeStamp ` " ;
    }
    
}

