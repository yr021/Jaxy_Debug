/*
 * This file was automatically generated by EvoSuite
 * Mon May 14 15:35:26 GMT 2018
 */

package com.rac021.jax.api.streamers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rac021.jax.api.executorservice.Worker;
import com.rac021.jax.api.streamers.DefaultStreamerConfigurator;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultStreamerConfigurator_ESTest extends DefaultStreamerConfigurator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.maxThreads = (Integer) 500;
      DefaultStreamerConfigurator.blockSize = 3166;
      DefaultStreamerConfigurator.ratio = Integer.MAX_VALUE;
      Semaphore semaphore0 = new Semaphore(Integer.MAX_VALUE, false);
      semaphore0.getQueueLength();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      semaphore0.tryAcquire(500, (-332L), timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      semaphore0.isFair();
      semaphore0.tryAcquire(124L, timeUnit1);
      DefaultStreamerConfigurator.blockSize = (-1010);
      semaphore0.getQueueLength();
      DefaultStreamerConfigurator.maxConcurrentUsers = (-1010);
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      semaphore0.tryAcquire(552, (long) Integer.MAX_VALUE, timeUnit2);
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.blockSize = Integer.MAX_VALUE;
      DefaultStreamerConfigurator.maxConcurrentUsers = 500;
      defaultStreamerConfigurator0.blockSize = (-1376);
      DefaultStreamerConfigurator.responseCacheSize = 4;
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.initPoolProducer();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.getSelectSize();
      assertEquals(5000, int0);
      
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      Worker worker0 = DefaultStreamerConfigurator.poolProducer;
      MockThread mockThread0 = new MockThread();
      worker0.setCorePoolSize(1105);
      worker0.remove(mockThread0);
      DefaultStreamerConfigurator.poolProducer = worker0;
      DefaultStreamerConfigurator.blockSize = 0;
      Semaphore semaphore0 = new Semaphore(1868);
      semaphore0.tryAcquire();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      semaphore0.tryAcquire(2114L, timeUnit0);
      Integer integer0 = DefaultStreamerConfigurator.maxThreads;
      DefaultStreamerConfigurator.maxThreads = null;
      Integer.compare(1, 1868);
      semaphore0.acquireUninterruptibly(1);
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.responseCacheSize = (-1340);
      DefaultStreamerConfigurator.blockSize = 1;
      DefaultStreamerConfigurator.maxThreads = null;
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.initPoolProducer();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.maxConcurrentUsers = 0;
      Semaphore semaphore0 = new Semaphore(5000, false);
      semaphore0.acquireUninterruptibly(5000);
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.selectSize = 0;
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.workerQueue = (int) null;
      Worker worker0 = DefaultStreamerConfigurator.poolProducer;
      worker0.allowCoreThreadTimeOut(true);
      MockThread mockThread0 = new MockThread("v&h85M0e|'x]`+$");
      MockThread mockThread1 = new MockThread(mockThread0, "v&h85M0e|'x]`+$");
      Integer integer0 = new Integer(5000);
      worker0.submit((Runnable) mockThread1, integer0);
      DefaultStreamerConfigurator.poolProducer = worker0;
      DefaultStreamerConfigurator.maxConcurrentUsers = 3424;
      DefaultStreamerConfigurator.blockSize = 5;
      DefaultStreamerConfigurator.workerQueue = 0;
      DefaultStreamerConfigurator.maxConcurrentUsers = (-247);
      DefaultStreamerConfigurator.maxThreads = (Integer) 5;
      DefaultStreamerConfigurator.responseCacheSize = 16;
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getBlockSize();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.initPoolProducer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ArrayBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.blockSize = 7500;
      Worker worker0 = DefaultStreamerConfigurator.poolProducer;
      worker0.isTerminating();
      DefaultStreamerConfigurator.blockSize = 5000;
      worker0.isShutdown();
      DefaultStreamerConfigurator.blockSize = (int) null;
      worker0.getMaximumPoolSize();
      DefaultStreamerConfigurator.ratio = (int) null;
      DefaultStreamerConfigurator.workerQueue = 5000;
      worker0.toString();
      worker0.isTerminating();
      DefaultStreamerConfigurator.initPoolProducer();
      worker0.getQueue();
      worker0.isShutdown();
      DefaultStreamerConfigurator.responseCacheSize = Integer.MAX_VALUE;
      DefaultStreamerConfigurator.poolProducer = worker0;
      DefaultStreamerConfigurator.responseCacheSize = 4;
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getRatio();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.selectSize = 3427;
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.ratio = (-1868);
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.maxThreads = (Integer) 4;
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.maxConcurrentUsers = 1578;
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      int int0 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int0);
      
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      int int1 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(500, int1);
      
      int int2 = DefaultStreamerConfigurator.getMaxConcurrentUsers();
      assertEquals(1578, int2);
      
      int int3 = DefaultStreamerConfigurator.getThreadPoolSize();
      assertEquals(4, int3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getBlockSize();
      int int0 = DefaultStreamerConfigurator.getThreadPoolSize();
      assertEquals(4, int0);
      
      int int1 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int1);
      
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.ratio = (int) null;
      DefaultStreamerConfigurator.responseCacheSize = 1894;
      DefaultStreamerConfigurator.initPoolProducer();
      int int2 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(1894, int2);
      
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      int int3 = DefaultStreamerConfigurator.getBlockSize();
      assertEquals(16, int3);
      
      int int4 = DefaultStreamerConfigurator.getMaxConcurrentUsers();
      assertEquals(Integer.MAX_VALUE, int4);
      
      int int5 = DefaultStreamerConfigurator.getSelectSize();
      assertEquals(5000, int5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.blockSize = 0;
      DefaultStreamerConfigurator.workerTimeOut = 2;
      DefaultStreamerConfigurator.workerQueue = 4;
      DefaultStreamerConfigurator.workerQueue = (-1);
      DefaultStreamerConfigurator.selectSize = 1;
      DefaultStreamerConfigurator.threadPoolSize = 0;
      DefaultStreamerConfigurator.selectSize = 1;
      DefaultStreamerConfigurator.workerQueue = Integer.MAX_VALUE;
      // Undeclared exception!
      DefaultStreamerConfigurator.initPoolProducer();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.getMaxConcurrentUsers();
      assertEquals(Integer.MAX_VALUE, int0);
      
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.workerQueue = 227;
      DefaultStreamerConfigurator.threadPoolSize = (int) null;
      DefaultStreamerConfigurator.workerTimeOut = Integer.MAX_VALUE;
      Semaphore semaphore0 = new Semaphore(Integer.MAX_VALUE);
      semaphore0.acquireUninterruptibly();
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.threadPoolSize = 16;
      DefaultStreamerConfigurator.maxThreads = (Integer) 5000;
      int int1 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int1);
      
      DefaultStreamerConfigurator.getMaxThreads();
      int int2 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(500, int2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      int int0 = 0;
      DefaultStreamerConfigurator.threadPoolSize = (-75);
      DefaultStreamerConfigurator.workerTimeOut = 1;
      DefaultStreamerConfigurator.responseCacheSize = (-75);
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.initPoolProducer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      Integer integer0 = new Integer((-753));
      DefaultStreamerConfigurator.maxThreads = integer0;
      Semaphore semaphore0 = new Semaphore((int) defaultStreamerConfigurator0.maxThreads);
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.threadPoolSize = 1;
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.initPoolProducer();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(500, int0);
      
      int int1 = DefaultStreamerConfigurator.getThreadPoolSize();
      assertEquals(4, int1);
      
      int int2 = DefaultStreamerConfigurator.getThreadPoolSize();
      assertEquals(4, int2);
      
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.maxThreads = (Integer) Integer.MAX_VALUE;
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      int int3 = DefaultStreamerConfigurator.getSelectSize();
      assertEquals(5000, int3);
      
      int int4 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(500, int4);
      
      DefaultStreamerConfigurator.initPoolProducer();
      int int5 = DefaultStreamerConfigurator.getMaxConcurrentUsers();
      assertEquals(Integer.MAX_VALUE, int5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getSelectSize();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.getSelectSize();
      assertEquals(5000, int0);
      
      int int1 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int1);
      
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      assertEquals(1, defaultStreamerConfigurator0.getRatio());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int0);
      
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      assertEquals(1, defaultStreamerConfigurator0.getRatio());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.selectSize = 5000;
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getThreadPoolSize();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.maxThreads = (Integer) 500;
      DefaultStreamerConfigurator.blockSize = 3166;
      DefaultStreamerConfigurator.ratio = Integer.MAX_VALUE;
      Semaphore semaphore0 = new Semaphore(Integer.MAX_VALUE, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      semaphore0.tryAcquire(500, (-332L), timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      semaphore0.tryAcquire(124L, timeUnit1);
      DefaultStreamerConfigurator.blockSize = (-1010);
      semaphore0.getQueueLength();
      DefaultStreamerConfigurator.maxConcurrentUsers = (-1010);
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      semaphore0.tryAcquire(552, (long) Integer.MAX_VALUE, timeUnit2);
      DefaultStreamerConfigurator.semaphoreMaxConcurrentUsers = semaphore0;
      DefaultStreamerConfigurator.blockSize = Integer.MAX_VALUE;
      DefaultStreamerConfigurator.maxConcurrentUsers = 500;
      DefaultStreamerConfigurator.selectSize = (-1376);
      DefaultStreamerConfigurator.responseCacheSize = 4;
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getBlockSize();
      DefaultStreamerConfigurator.getSelectSize();
      DefaultStreamerConfigurator.initPoolProducer();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = DefaultStreamerConfigurator.maxConcurrentUsers;
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getResponseCacheSize();
      // Undeclared exception!
      try { 
        DefaultStreamerConfigurator.getMaxThreads();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.streamers.DefaultStreamerConfigurator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      int int0 = DefaultStreamerConfigurator.getRatio();
      assertEquals(1, int0);
      
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      DefaultStreamerConfigurator.ratio = 0;
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.maxThreads = (Integer) 4;
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.maxConcurrentUsers = (-120);
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator.initPoolProducer();
      DefaultStreamerConfigurator.getRatio();
      DefaultStreamerConfigurator.getThreadPoolSize();
      DefaultStreamerConfigurator.getThreadPoolSize();
      int int1 = DefaultStreamerConfigurator.getResponseCacheSize();
      assertEquals(500, int1);
      
      int int2 = DefaultStreamerConfigurator.getMaxConcurrentUsers();
      assertEquals(Integer.MAX_VALUE, int2);
      
      int int3 = DefaultStreamerConfigurator.getThreadPoolSize();
      assertEquals(4, int3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getResponseCacheSize();
      DefaultStreamerConfigurator.getMaxConcurrentUsers();
      DefaultStreamerConfigurator.initSemaphoreConcurrentUsers();
      DefaultStreamerConfigurator defaultStreamerConfigurator0 = new DefaultStreamerConfigurator();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      linkedBlockingQueue0.add(mockThread2);
      Worker worker0 = null;
      try {
        worker0 = new Worker(5000, 5, 4, timeUnit0, linkedBlockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
