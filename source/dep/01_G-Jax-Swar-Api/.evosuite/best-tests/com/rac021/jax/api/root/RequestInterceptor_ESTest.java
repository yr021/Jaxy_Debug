/*
 * This file was automatically generated by EvoSuite
 * Mon May 14 15:35:42 GMT 2018
 */

package com.rac021.jax.api.root;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rac021.jax.api.root.RequestInterceptor;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.core.MultivaluedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestInterceptor_ESTest extends RequestInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequestInterceptor requestInterceptor0 = new RequestInterceptor();
      ContainerRequestContext containerRequestContext0 = mock(ContainerRequestContext.class, new ViolatedAssumptionAnswer());
      doReturn((MultivaluedMap) null).when(containerRequestContext0).getHeaders();
      // Undeclared exception!
      try { 
        requestInterceptor0.filter(containerRequestContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rac021.jax.api.root.RequestInterceptor", e);
      }
  }
}
